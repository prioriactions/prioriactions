% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getBenefit.R
\name{getBenefit}
\alias{getBenefit}
\title{Get benefit}
\usage{
getBenefit(x)
}
\arguments{
\item{x}{\code{Solution-class}, \code{Portfolio-class} or \code{ConservationProblem-class} object.}
}
\value{
\link{data.frame}.
}
\description{
Provides the total achieved benefit or maximum benefits to achieve
for each feature in a planning exercise. This is the sum of local benefits multiplied
by the amount of features in each planning unit.
}
\details{
In the case of working with the presence/absence of threats (binary intensities),
we defined the benefit as a measure of the number of actions taken against the threats that
affect said feature with respect to all possible actions to do. This value is multiplied by
the amount of feature in that planning unit. For more information on its calculation, see the
\href{https://prioriactions.github.io/prioriactions/reference/getBenefit.html}{getBenefit}
reference.

The benefit for a given feature can be expressed
mathematically for a set of planning units
\eqn{I} indexed by \eqn{i}, and
a set of threats \eqn{K} indexed by \eqn{k} as:

\deqn{
\sum_{i \in I_s} \frac{ \sum_{k \in K_i \cap K_s}{x_{ik}}}{|K_i \cap K_s|} r_{is}
}

Where, \eqn{x_{ik}} is a decisions variable that specifies
whether an action to address threat \eqn{k}  has been selected in planning unit
\eqn{i} (1) or not (0), \eqn{r_{is}}
is the amount of feature \eqn{s} in planning unit \eqn{i}.
}
\examples{
# set seed for reproducibility
set.seed(14)

## Load data
data(sim_pu_data, sim_features_data, sim_dist_features_data,
sim_threats_data, sim_dist_threats_data, sim_sensitivity_data,
sim_boundary_data)

## Create data instance
problem_data <- problem(
  pu = sim_pu_data, features = sim_features_data, dist_features = sim_dist_features_data,
  threats = sim_threats_data, dist_threats = sim_dist_threats_data,
  sensitivity = sim_sensitivity_data, boundary = sim_boundary_data
)

## Get maximum benefits to obtain
getBenefit(problem_data)

## Create optimization model
problem_model <- minimizeCosts(x = problem_data, blm = 1)

## Solve the optimization model
s <- solve(a = problem_model, solver = "gurobi", gap_limit = 0.01, output_file = FALSE)

# get benefits of solution
getBenefit(s)

}
